---HISTORIAL---
vim .bashrc
  shopt -s histappend                      # append to history, don't overwrite it
  export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

source .bashrc
.bash_history > historia.txt
sudo cp -r /home/dmarta14/.bash_history /home/dmarta14/dmarta14_history

---COPIAR DE GOOGLE CLOUD A MI PC---
scp dmarta14@IP:/home/dmarta14/carpeta.tar.gz /home/dmarta14/Escritorio


---1.1.ADMINISTRACIÓN EN LINUX---
-Listar sólo ficheros --> ls -F | grep /

-Listar en orden de modificación --> ls -lt

-Comprimir:
  tar -cvf name.tar /dir
  tar -cvzf name.tar.zp /dir

-Descomprimir:
  tar -xvf name.tar     o     tar -xvf name.tar -C /dir
  tar -xvzf name.tar    o     tar -xvzf name.tar -C /dir

-Variable de entorno --> export VAR="value"

-Modificar extensión --> mv $file "${file.txt}".t

-Sustituir palabra --> sed -i "s/PAL/$palsustituta" $ficherosustituir.txt

-Ordenar por separador --> sort -t ':' -k2 /fich

---1.2.SISTEMAS DE FICHEROS---

-FIO:
- sudo apt install fio

- https://docs.gitlab.com/ee/administration/operations/filesystem_benchmarking.html

- sudo fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --bs=4k --iodepth=64 --readwrite=randrw --rwmixread=75 --size=512MB --filename=/discoExt4/ficheroPruebas1

-CREAR PARTICIÓN Y MONTARLA :
  lsblk -e7
  sudo cfdisk /dev/sdb					(Interfaz para gestionar particiones)
  sudo mkfs.ext3 /dev/sdb1				(Formatearla como EXT3)
  sudo mkdir /disco1
  sudo mount -t ext3 /dev/sdb1 /disco1			(Montarla en el directorio /disco1)
  sudo cp -r /var* /disco1				(Copiar el contenido de /var en el directorio /disco1)
  sudo rezize2fs -M /dev/sdb1			
  sudo umount /disco1
  
-PARTICIÓN PERMANENTE :
  lsblk -e7
  sudo cfdisk /dev/sdb
  sudo mkfs.ext3 /dev/sdb1
  sudo mkdir /disco1
  sudo cp /etc/fstab /etc/fstab.backup
  sudo blkid /dev/sdb1  (UUID)				(Obtener el UUID de la particion)
  sudo vim /etc/fstab
    UUID=X /disco1 etx3 discard,defaults,nofail 0 2

-VOLÚMENES :
  -sudo vgcreate volumen1 /dev/sdb1 /dev/sdb2		(Crear un grupo de volumnes con varios volumenes fisicos)
  -sudo lvcreate volumen1 -l 100%FREE -n volumen1	(Creacion de un volumen logico)
  -sudo mkfs.ext3 /dev/volumen1/volumen1		(Formatear volumen como EXT3)
  -sudo mkdir /miVol
  -sudo mount -t ext3 /dev/volumen1/volumen1 /miVol	(Montar volumen en el directorio /miVol)
  
  -sudo pvcreate /dev/sdb3				(Crear volumen fisico con una partición)
  -sudo vgextend volumen1 /dev/sdb3			(Extender el grupo de volumenes)
  -sudo umount /miVol
  -sudo lvremove /dev/volumen1/volumen1			(Eliminar un volumen lógico)
  -sudo vgremove volumen				(Eliminar un grupo de volumenes)
  -sudo vgextend volumen1 /dev/sdc2
  -sudo lvextend /dev/volumen1/volumen1 /dev/sdc2
  -sudo resize2fs /dev/volumen1/volumen1
  -ls /tmp/lvmFolder/
-RAID:
  -sudo apt install mdadm rsync initramfs-tools -y
  
  -sudo mdadm --create /dev/md0 --verbose --level=5 --raid-devices=3 /dev/sdb1 /dev/sdb2 /dev/sdc1
  -sudo mdadm -C /dev/md0  -l raid(1-5) -n 2 /dev/sdb1 /dev/sdb2
  
  -sudo mdadm --detail /dev/md0				(Para comprobar que este bien)
  -sudo mkfs.ext3 /dev/md0
  -sudo mkdir /miRaid
  -sudo mount -t ext3 /dev/md0 /miRaid
  -sudo cp -r /var* /miRaid
  -sudo mdadm /dev/md0 -f /dev/sdb1    			(Simular fallo)
  -sudo mdadm /dev/md0 -r /dev/sdb1    			(Eliminar disco roto)
  -sudo mdadm /dev/md0 -a /dev/sdb2    			(Añadir el otro disco)
  -cat /proc/mdstat					(Monitorizar la reparacion)
  -sudo umount /miRaid
  -sudo mdadm --stop /dev/md0				(Eliminar raid)
  -sudo mdadm --remove /dev/md0				(Eliminar raid)

-RSNAPSHOT:
  -sudo apt install rsync rsnapshot
  -sudo cp /etc/rsnapshot.conf /etc/rsnapshot.conf.default
  -sudo vim /etc/rsnapshot.conf
	
	a) Direcotorio para almacenar copias de seguridad --> /backups
	
	# All snapshots will be stored under this root directory.#
	snapshot_root   /backups/

	b) Niveles de copia e intervalos:
		i. "horaria", 24
		ii. "diaria", 7
		iii. "semanal", 4
		
	# BACKUP LEVELS / INTERVALS #
	retain hourly 24
	retain daily 7
	retain weekly 4
	
	c) Directorios a guardar (Todos los que se guardan en el directorio /backups): /home, /etc, /var/log
	
	# BACKUP POINTS / SCRIPTS #
	backup /home/ localhost/
	backup /etc/ 	localhost/
	backup /var/log/ localhost/
	
  -sudo rsnapshot configtest		(Verificar que la configuracion es correcta)
  -sudo rsnapshot -t hourly 		(Realizar una copia tipo horaria)
  -sudo rsnapshot-diff /dir1 /dir2
  
---1.3.MONITORIZACIÓN---
  -Prioridad (PR) --> 20 + NI
  -NI --> [-20..19]
  -top -o PR			(Ordenar PR)
  
-PS:
- ps				(Obtener el numero de procesos en ejecucion del sistema)
- ps -U root			(Obtener el numero de procesos en ejecucion que pertenezcan a root)

-STRESS-NG:
  -sudo apt install stress-ng
  -stress-ng -c1 -t20 				(nucleos, segundos)
  -kill -STOP PID				(Pausar)
  -kill -CONT PID				(Reanudar)
  -renice -n -20 -p PID				(Reducir prioridad al mínimo)
  -ulimit -t300 (5 minutos)			(Limitar)

-CRONTAB :
  -sudo crontab -u root -e
  -https://tecadmin.net/crontab-in-linux-with-20-examples-of-cron-schedule/

-QUOTAS :
  -sudo apt install quota
  -sudo apt install quotatool
  -sudo apt install linux-image-extra-virtual
  -sudo apt install linux-modules-extra-gcp
  -sudo cfdisk /dev/sdb
  -sudo mkfs.ext4 -O quota /dev/sdb1
  -sudo mkdir /disco1
  -sudo vim /etc/fstab
    /dev/sdb1 /disco1 ext4 defaults,usrquota,grpquota 0 0
  
  -sudo mount -O remount /disco1
  -sudo quotaon -v /disco1
  -sudo edquota -u marcos (En KB)
  -sudo chown marcos:marcos /disco1
  -quota
  -sudo quotaoff -v /disco1

-LOGS :
  -logger "Hola"				(Enviar mensaje a /var/log/syslog)
  -logger -p debug "Hola buenas tardes"		(Enviar mensaje con prioridad debug)  
  -Nivel debug:
    sudo vim /etc/rsyslog.d/50-default.conf
      ssh.debug /var/log/ssh.log
    sudo service rsyslog restart
  

-BENCHMARKS :
  -wget https://tu-dresden.de/zih/forschung/ressourcen/dateien/projekte/firestarter/FIRESTARTER_2.0.tar.gz
  -sudo mkdir firestarter
  -sudo tar -xvzf FIRESTARTER_2.tar.gz /firestarter 
  -cd /firestarter
  -./FIRESTARTER -t 30 -r			(Ejecutar durante 30 segundos)
  -./FIRESTARTER -t 30 -i x			(Ejecuta X instruccion)
  -Muestra los tipos disponibles en la CPU --> ./FIRESTARTER -a

---2.1.SERVICIOS EN RED---
-NFS:
  -sudo apt update
  -sudo apt install nfs-common (Cliente)
  -sudo apt install nfs-kernel-server nfs-common (Servidor)
  
  -Compartir una carpeta (Servidor):
    -sudo mkdir /compartir
    -sudo vim /etc/exports
      /compartir *(ro,root_squash,no_subtree_check)
    -sudo chown nobody:nogroup /compartir
    -sudo exportfs -ra
    -sudo exportfs -v
  
  -Montar la carpeta en /dir (Cliente):
    -sudo mount -t nfs IPSERVIDOR:/compartir /dir
    -df -h
  -Cambiar permisos para que se pueda editar (Servidor):
    -sudo chown marcos:marcos /compartir

-MOSQUITTO:

**(Cliente)**
$ mosquitto_sub -h localhost -t "miDemoMQTT" 	(Suscribirse)
$ mosquitto_pub -h 34.88.11.81 -t "edificio/#" -v 
(edificio/pasillo "mensaje")

**(Servidor)**
$ mosquitto_pub -h localhost -t "miDemoMQTT" -m "Hola Mundo IoT"
$ mosquitto_pub -h 34.88.11.81 -t "miDemoMQTT" -m "Hola prueba"
$ mosquitto_pub -h 34.88.11.81 -t "edificio/#" -m "Hola prueba"

$ mosquitto_pub -h IP -t "ciudades/araba" -m "Gasteiz" -r		(Mensaje retenido)

---WHILE---
-i=$((i+1))
-Cuando reciba mensaje --> mosquitto_sub -h IP -t "topic" | while read value; do
  -$value
  
-- EJERCICIO 2 -- (Prueba Examen)

$ lsblk -e7		(Comprobar el nombre de la particion)
$ sudo cfdisk /dev/sdb	(Interfaz de gestion de particiones)

(Formateo de las 3 particiones): 
$ sudo mkfs.ext4 /dev/sdb1 
$ sudo mkfs.ext4 /dev/sdb2
$ sudo mkfs.btrfs /dev/sdb3

(Montaje de cada una de las particiones)
$ sudo mkdir /disco1
$ sudo mkdir /disco2
$ sudo mkdir /disco3

$ sudo mount -t ext4 /dev/sdb1 /disco1
$ sudo mount -t ext4 /dev/sdb2 /disco2
$ sudo mount -t btrfs /dev/sdb3 /disco3

$ sudo cp -r /var/log* /disco2		(Copiar contenido de /var/log en /disco2)
$ cd /disco2
$ ls

(Montaje permanente de Btrfs) :
$ sudo blkid /dev/sdb3		(Obtenemos el UUID)
$ sudo vim /etc/fstab
	UUID="958c6cfc-7a90-423f-b3ef-58dd7aabdbc5"     /disco3 btrfs   discard,defaults,nofail 0       2

(Activar sistema de quotas para /disco1 y fijar los siguientes limites para el usuario actual):

$ sudo umount /disco1
$ sudo mkfs.ext4 -O quota /dev/sdb1
$ sudo vim /etc/fstab
	/dev/sdb1       /disco1 ext4    defaults,usrquota,grpquota      0       0

$ sudo mount -O remount /disco1		(Montar en el directorio --Ejecuta lo escrito en /etc/fstab --)
$ mount | grep /dev/sdb			(Comprobar que se haya montado correctamente)
$ sudo edquota -u unai
$ sudo chown unai:unai /disco1		(Le damos permisos sobre el directorio donde esta montada la particion con quotas para que pueda ejecutarlo, editarlo ....)
$ sudo edquota -T -u unai			(Ahora nos dejaria editar el tiempo de gracia)
$ sudo quotaon  /disco1
$ cd /disco1
$ dd if=/dev/random of=hola.out bs=600MB count=1000
	dd: error writing 'hola.out': Disk quota exceeded
	1+0 records in
	0+0 records out
	204791808 bytes (205 MB, 195 MiB) copied, 5.80738 s, 35.3 MB/s
	
	
-- SCRIPT LAB3 (MAYOR GFLOPS) --

#!/bin/bash

maximo=0
echo "Entrando a Firestarter"
cd /home/unai/Firestarter
for i in {1..3}; do
        echo "Ejecutando la funcion $i --> "
        ./FIRESTARTER -t 30 -r -i $i > /home/unai/fire.txt
        dato=`grep -w "GFLOPS" /home/unai/fire.txt | cut -d ' ' -f5`
        
        if [ $dato > $maximo ]; then
                maximo=$dato
        fi
done
echo "El mayor es: $maximo GFLOPS"







Ejercicio 1

Para realizar este ejercicio, es necesario utilizar el fichero *users txt disponible en el apartado Evaluación de eGela.
Este fichero contiene los nombres de 5 cuentas de usuario. Teniendo este fichero en cuenta, realizar un script que:
-Pide al usuario el nombre de un fichero
-Verifica si el fichero existe en la misma carpeta donde se ejecuta el script.
-Si el fichero no existe:
	- Muestra un mensaje "Fichero inexistente".
	- Crea un enlace simbólico a /tmp llamado temporal en el directorio SHOME de vuestro usuario.
-Si el fichero existe:
	- Por cada cuenta de usuario listada en el fichero, verifica si la cuenta existe en el sistema. De ser asi,
	muestra el nombre de la cuenta y su Shell de inicio.
	-Muestra el número total de cuentas de usuario listadas en el fichero que existen en el sistema.
Entregar un fichero llamado "Ej1.sh" con el script.

nano Ej1.sh
#!/bin/bash

# Pedir al usuario el nombre de un fichero
echo "Introduce el nombre del fichero:"
read fichero

# Verificar si el fichero existe en el directorio actual
if [ ! -f "$fichero" ]; then
    echo "Fichero inexistente."
    
    # Crear un enlace simbólico llamado "temporal" en el directorio de inicio del usuario
    ln -s /tmp "$HOME/temporal"
    echo "Enlace simbólico 'temporal' creado en el directorio $HOME apuntando a /tmp."

else
    # Si el fichero existe, procesar las cuentas de usuario listadas en él
    total_usuarios=0
    cuentas_existentes=0

    while read -r usuario; do
        # Verificar si la cuenta de usuario existe en el sistema
        if id "$usuario" &>/dev/null; then
            # Mostrar el nombre de la cuenta y su Shell de inicio
            shell=$(getent passwd "$usuario" | cut -d: -f7)
            echo "Cuenta de usuario: $usuario"
            echo "Shell de inicio: $shell"
            cuentas_existentes=$((cuentas_existentes + 1))
        fi
        total_usuarios=$((total_usuarios + 1))
    done < "$fichero"

    # Mostrar el número total de cuentas de usuario que existen en el sistema
    echo "Número total de cuentas de usuario listadas en el fichero: $total_usuarios"
    echo "Número de cuentas que existen en el sistema: $cuentas_existentes"
fi


chmod +x Ej1.sh
./Ej1.sh


Ejercicio 2

Utilizar 1 disco duro de 10 GB para realizar las siguientes tareas:

# Crear 6 particiones de 1 GB en el disco.
sudo cfdisk /dev/sdb

# Formatear 1 de las particiones como ext4 y otra de las particiones como xfs.
sudo mkfs.ext4 /dev/sdb1
sudo mkfs.xfs /dev/sdb2

# Montar la particion ext4 en /discoExt4.
sudo mkdir /discoExt4
sudo mount /dev/sdb1 /discoExt4

# Montar la partición xfs en /discoXfs y configurar su montaje automático al inicio del sistema.
sudo mkdir /discoXfs
sudo mount /dev/sdb2 /discoXfs

nano /etc/fstab
/dev/sdb2 /discoXfs xfs defaults 0 0

# Utilizar 3 de las 4 particiones sin formatear para crear un sistema RAID 5.
sudo mdadm --create /dev/md0 --verbose --level=5 --raid-devices=3 /dev/sdb3 /dev/sdb4 /dev/sdb5

# Formatear RAID con ext4
sudo mkfs.ext4 /dev/md0
sudo mkdir /raidExamen
sudo mount /dev/md0 /raidExamen

# Crear fichero de 50 MB con datos aleatorios
sudo dd if=/dev/urandom of=/raidExamen/fichero_aleatorio bs=1M count=50

# Simular fallo en el RAID y recuperar usando /dev/sdb6
sudo mdadm /dev/md0 --fail /dev/sdb3
sudo mdadm /dev/md0 --remove /dev/sdb3
sudo mdadm /dev/md0 --add /dev/sdb6

# Desmontar y parar el RAID
sudo umount /raidExamen
sudo mdadm --stop /dev/md0
sudo mdadm --zero-superblock /dev/sdb3 /dev/sdb4 /dev/sdb5 /dev/sdb6

# Desmontaje automático (eliminar de /etc/fstab)
nano /etc/fstab
/dev/sdb2 /discoXfs xfs defaults 0 0




Ejercicio 3

# Configuración de logs para mensajes de nivel "warning"
	1.Abre el archivo de configuración de rsyslog

		$ sudo nano /etc/rsyslog.d/50-default.conf

	2.Añade la siguiente línea al final del archivo para capturar mensajes de advertencia (warning) de usuario y escribirlos en /var/log/logs.ej3
		
		$ user.warning /var/log/logs.ej3

	3.Guarda y cierra el archivo.
	4.Crea el archivo de log, si no existe:

		$ sudo touch /var/log/logs.ej3
		$ sudo chmod 644 /var/log/logs.ej3

	5.Reinicia el servicio rsyslog para aplicar los cambios:

		$ sudo systemctl restart rsyslog

# Configurar un Broker Mosquitto local con autenticación

	1.Instala Mosquitto y Mosquitto-clients (si no están instalados):

		$ sudo apt-get install mosquitto mosquitto-clients

	2.Habilita la autenticación en el archivo de configuración de Mosquitto.

		$ sudo nano /etc/mosquitto/mosquitto.conf

		Añade lo siguiente al archivo:

		$ allow_anonymous false
		$ password_file /etc/mosquitto/passwd

	3.Crea usuarios y configura sus contraseñas:

		$ sudo mosquitto_passwd -c /etc/mosquitto/passwd Iker
		$ sudo mosquitto_passwd /etc/mosquitto/passwd Mikel

        4.Reinicia el servicio Mosquitto:

		 $ sudo systemctl restart mosquitto


# Configurar permisos para el topic "examen"

	1. Crea el archivo de configuración de ACL (Access Control List):

		$ sudo nano /etc/mosquitto/acls
		Añade lo siguiente al archivo:

		user Ther
		topic read examen

		user Mikel
		topic readwrite examen


	2.En el archivo mosquitto.conf, asegúrate de que se utilicen las ACLs. Añade la siguiente línea:


		$ acl_file /etc/mosquitto/acls


	3.Reinicia el servicio Mosquitto:

		 $ sudo systemctl restart mosquitto


# Programar el envío automático de un mensaje MQTT cada 1 minuto

	1.Crea un script llamado send_random.sh que envíe un número aleatorio al topic "examen":

		$ sudo nano /usr/local/bin/send_random.sh
		Contenido del archivo:

		#!/bin/bash
		RANDOM_NUMBER=$(shuf -i 1-100 -n 1)
		mosquitto_pub -h localhost -t examen -u Mikel -P 'Mikel' -m "$RANDOM_NUMBER"

	2. Haz que el script sea ejecutable:

		$ sudo chmod +x /usr/local/bin/send_random.sh

	3. Programa la tarea en cron para ejecutarse cada minuto:

		$ sudo crontab -e

	4.Añade la siguiente línea para ejecutar el script cada minuto:

		$ * * * * * /usr/local/bin/send_random.sh


# Usar un suscriptor Mosquitto para enviar mensajes recibidos al log del sistema


	1.Crea un script que suscriba al usuario Ther y envíe mensajes al log del sistema:

		$ sudo nano /usr/local/bin/subscribe_log.sh

		Contenido del archivo:

		#!/bin/bash
		mosquitto_sub -h localhost -t examen -u Iker -P 'Iker' | while read -r message
		do
 			logger -p user.warning "Mensaje recibido: $message"
		done

	2.Haz que el script sea ejecutable:

		$ sudo chmod +x /usr/local/bin/subscribe_log.sh

	3.Ejecuta el script para suscribirte al topic y enviar los mensajes al log con nivel warning:

		$ /usr/local/bin/subscribe_log.sh &


# Parar el envío automático de mensajes al topic

		$ sudo crontab -e











